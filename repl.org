#+STARTUP: indent

* REPL代码
REPL系统挂接到串口 1 上，允许通过命令对系统进行操作，比如查看参数，开
锁，关锁等。
** 基本框架
#+begin_src c :tangle /dev/shm/eggos/repl.h
  #ifndef __REPL_H
  #define __REPL_H

  #include "uart.h"
  #include "ring.h"
  #include "utility.h"

  #define _output_string_1(str, line) do {                                \
    uint32_t len##line = 0;                                               \
    while (str[len##line] != '\0') {                                      \
      len##line ++;                                                       \
    }                                                                     \
    uint8_t size##line = 0;                                               \
    if (len##line < 128) {                                                \
      size##line = 1;                                                     \
    } else if (len##line< 16384) {                                        \
      size##line = 2;                                                     \
    } else if (len##line< 2097152) {                                      \
      size##line = 3;                                                     \
    } else {                                                              \
      size##line = 4;                                                     \
    }                                                                     \
    if (len##line + size##line <= ring_available(&repl_tx)) {             \
      uint32_t reallen##line = len##line;                                 \
      while (len##line > 0) {                                             \
        ring_write(&repl_tx, len##line & 0x7F);                           \
        len##line >>= 7;                                                  \
      }                                                                   \
      ring_write_array(&repl_tx, (uint8_t *)str, 0, reallen##line);       \
    }                                                                     \
    } while (0)

  #define _output_string_0(str, line) _output_string_1(str, line)

  #define output_string(str) _output_string_0(str, __LINE__);

  #define _output_char_1(chr, line) do {                  \
      if (ring_available(&repl_tx) > 1) {                 \
        uint8_t buf##line[2] = { 0x01, chr };             \
        ring_write_array(&repl_tx, buf##line, 0, 2);      \
      }                                                   \
    } while(0)

  #define _output_char_0(chr, line) _output_char_1(chr, line)

  #define output_char(chr) _output_char_0(chr, __LINE__)

  #define _output_newline_1(line) do {                    \
      if (ring_available(&repl_tx) > 2) {                 \
        uint8_t buf##line[3] = { 0x02, '\r', '\n' };      \
        ring_write_array(&repl_tx, buf##line, 0, 3);      \
      }                                                   \
    } while (0)

  #define _output_newline_0(line) _output_newline_1(line)

  #define output_newline() _output_newline_0(__LINE__)

  #define _output_uint32_1(i, line) do {          \
      char buf##line[20];                         \
      bzero(buf##line, 20);                       \
      uint_to_string(i, buf##line);               \
      output_string(buf##line);                   \
    } while (0)

  #define _output_uint32_0(i, line) _output_uint32_1(i, line)

  #define output_uint32(i) _output_uint32_0(i, __LINE__)

  #define _output_byte_1(b, line) do {                            \
      for (uint8_t i##line = 0; i##line < 2; i##line ++) {        \
        switch ((b >> (8 - 4 * (i##line + 1))) & 0x0F) {          \
        case 0x00: output_char('0'); break;                       \
        case 0x01: output_char('1'); break;                       \
        case 0x02: output_char('2'); break;                       \
        case 0x03: output_char('3'); break;                       \
        case 0x04: output_char('4'); break;                       \
        case 0x05: output_char('5'); break;                       \
        case 0x06: output_char('6'); break;                       \
        case 0x07: output_char('7'); break;                       \
        case 0x08: output_char('8'); break;                       \
        case 0x09: output_char('9'); break;                       \
        case 0x0A: output_char('A'); break;                       \
        case 0x0B: output_char('B'); break;                       \
        case 0x0C: output_char('C'); break;                       \
        case 0x0D: output_char('D'); break;                       \
        case 0x0E: output_char('E'); break;                       \
        case 0x0F: output_char('F'); break;                       \
        }                                                         \
      }                                                           \
    } while (0)

  #define _output_byte_0(b, line) _output_byte_1(b, line)

  #define output_byte(b) _output_byte_0(b, __LINE__)

  extern struct uart_context_t repl_uart_context;

  extern struct ring_t repl_tx;
  extern struct ring_t repl_rx;
  extern uint8_t debug;

  void repl_setup(struct uart_context_t * ctx);
  void repl_eventloop(struct uart_context_t * ctx);

  #endif
#+end_src
#+begin_src c :tangle /dev/shm/eggos/repl.c
  #include <stdint.h>
  #include <stddef.h>
  #include <libopencm3/stm32/rcc.h>
  #include <libopencm3/stm32/usart.h>
  #include <libopencm3/cm3/nvic.h>
  #include "repl.h"
  #include "stack.h"
  #include "lock.h"
  #include "speaker.h"
  #include "gpio.h"
  #include "uart.h"
  #include "egg-repl-fsm.h"
  #include "egg-repl-lex-fsm.h"
  #include "utility.h"

  #define REPL_BUFFER_BITSIZE 10
  #define REPL_STACK_BUFFER_BITSIZE 6

  <<repl-lex-context>>
  uint8_t debug = 0;
  struct ring_t repl_tx, repl_rx;
  static struct egg_repl_lex_context_t repl_lex_context;
  static uint32_t repl_state, repl_lex_state;
  struct uart_context_t repl_uart_context;
  static struct stack_t repl_stack;

  static uint8_t repl_tx_buffer[2 << (REPL_BUFFER_BITSIZE - 1)];
  static uint8_t repl_rx_buffer[2 << (REPL_BUFFER_BITSIZE - 1)];
  static uint8_t repl_stack_buffer[2 << (REPL_STACK_BUFFER_BITSIZE - 1)];

  <<repl-lock-usage>>
  <<repl-debug-usage>>
  <<repl-play-usage>>
  <<repl-volume-usage>>
  <<repl-gpio-usage>>
  <<repl-help>>
  <<repl-lock-on>>
  <<repl-lock-off>>
  <<repl-debug-on>>
  <<repl-debug-off>>
  <<repl-play>>
  <<repl-volume>>
  <<repl-gpio>>
  <<egg-repl-fsm-action>>
  <<egg-repl-lex-fsm-action>>

  <<repl-setup>>
  <<repl-eventloop>>
#+end_src
** 配置
#+begin_src c :noweb-ref repl-setup
  void repl_setup(struct uart_context_t * ctx) {
    ring_init(&repl_tx, repl_tx_buffer, REPL_BUFFER_BITSIZE);
    ring_init(&repl_rx, repl_rx_buffer, REPL_BUFFER_BITSIZE);
    stack_init(&repl_stack, repl_stack_buffer, REPL_STACK_BUFFER_BITSIZE);
    ctx->tx = &repl_tx;
    ctx->rx = &repl_rx;
    ctx->baudrate = 115200;
    ctx->databits = 8;
    ctx->stopbits = 1;
    ctx->tx_interval = 1; // 10ms
    ctx->loop_interval = 9; // 10ms
    ctx->slot_enabled = 0;
    ctx->manual = 0;
    bzero(&repl_lex_context, sizeof(struct egg_repl_lex_context_t));
    repl_state = EGG_REPL_READY_STATE;
    repl_lex_state = EGG_REPL_LEX_READY_STATE;
  }
#+end_src
** 主循环
#+begin_src c :noweb-ref repl-eventloop
  void repl_eventloop(struct uart_context_t * ctx) {
    uint32_t rxlen = ring_length(ctx->rx);
    if (rxlen > 0) {
      for (uint32_t i = 0; i < rxlen; i ++) {
        uint8_t byte;
        ring_read(ctx->rx, &byte);
        repl_lex_context.byte = byte;
        if ('a' <= byte && byte <= 'z') {
          output_char(byte);
          repl_lex_state = egg_repl_lex_transform_state(repl_lex_state, EGG_REPL_LEX_CHAR_EVENT, &repl_lex_context);
        } else if ('A' <= byte && byte <= 'Z') {
          output_char(byte);
          repl_lex_state = egg_repl_lex_transform_state(repl_lex_state, EGG_REPL_LEX_CHAR_EVENT, &repl_lex_context);
        } else if ('0' <= byte && byte <= '9') {
          output_char(byte);
          repl_lex_state = egg_repl_lex_transform_state(repl_lex_state, EGG_REPL_LEX_DIGITIAL_EVENT, &repl_lex_context);
        } else if (byte == '\r') {
          output_char(byte);
          output_char('\n');
          repl_lex_state = egg_repl_lex_transform_state(repl_lex_state, EGG_REPL_LEX_CR_EVENT, &repl_lex_context);
        } else if (byte == '\n') {
          output_char('\r');
          output_char(byte);
          repl_lex_state = egg_repl_lex_transform_state(repl_lex_state, EGG_REPL_LEX_CR_EVENT, &repl_lex_context);
        } else if (byte == '\t') {
          output_char(byte);
          repl_lex_state = egg_repl_lex_transform_state(repl_lex_state, EGG_REPL_LEX_TAB_EVENT, &repl_lex_context);
        } else if (byte == '\b') {
          output_char(byte);
          repl_lex_state = egg_repl_lex_transform_state(repl_lex_state, EGG_REPL_LEX_BS_EVENT, &repl_lex_context);
        } else if (byte == ' ') {
          output_char(byte);
          repl_lex_state = egg_repl_lex_transform_state(repl_lex_state, EGG_REPL_LEX_SPACE_EVENT, &repl_lex_context);
        } else if (byte == 127) {
          output_char('\b');
          repl_lex_state = egg_repl_lex_transform_state(repl_lex_state, EGG_REPL_LEX_BS_EVENT, &repl_lex_context);
        }
      }
    }
  }
#+end_src
** 交互状态机
交互状态机用于解析从上位机发送来的数据。交互状态机的定义见
egg-repl-fsm.xlsx 文件。

#+begin_src c :noweb-ref egg-repl-fsm-action
  void egg_repl_do_action(enum EGG_REPL_ACTION action, void * data) {
    switch (action) {
    case EGG_REPL_HELP_ACTION:
      stack_clear(&repl_stack);
      repl_help();
      break;
    case EGG_REPL_LOCK_USAGE_ACTION:
      stack_clear(&repl_stack);
      repl_lock_usage();
      break;
    case EGG_REPL_NUMBER_ACTION:
      stack_push(&repl_stack, * (uint8_t *) data);
      break;
    case EGG_REPL_LOCK_OFF_ACTION: {
      uint8_t cabin = 0;
      stack_top(&repl_stack, &cabin);
      stack_pop(&repl_stack);
      repl_lock_off(cabin);
      break;
    }
    case EGG_REPL_LOCK_ON_ACTION: {
      uint8_t cabin = 0;
      stack_top(&repl_stack, &cabin);
      stack_pop(&repl_stack);
      repl_lock_on(cabin);
      break;
    }
    case EGG_REPL_DEBUG_USAGE_ACTION:
      stack_clear(&repl_stack);
      repl_debug_usage();
      break;
    case EGG_REPL_DEBUG_ON_ACTION:
      stack_clear(&repl_stack);
      repl_debug_on();
      break;
    case EGG_REPL_DEBUG_OFF_ACTION:
      stack_clear(&repl_stack);
      repl_debug_off();
      break;
    case EGG_REPL_PLAY_USAGE_ACTION:
      stack_clear(&repl_stack);
      repl_play_usage();
      break;
    case EGG_REPL_NUMBER16_ACTION:
      stack_push(&repl_stack, (* (uint8_t *) data) & 0xFF);
      stack_push(&repl_stack, ((* (uint16_t *) data) >> 8) & 0xFF);
      break;
    case EGG_REPL_PLAY_ACTION: {
      uint16_t audio = 0;
      uint8_t msb = 0, lsb = 0;
      stack_top(&repl_stack, &msb);
      stack_pop(&repl_stack);
      stack_top(&repl_stack, &lsb);
      stack_pop(&repl_stack);
      audio = (msb << 8) | lsb;
      repl_play(audio);
      break;
    }
    case EGG_REPL_VOLUME_USAGE_ACTION:
      stack_clear(&repl_stack);
      repl_volume_usage();
      break;
    case EGG_REPL_VOLUME_ACTION: {
      uint8_t vol = 0;
      stack_top(&repl_stack, &vol);
      stack_pop(&repl_stack);
      repl_volume(vol);
      break;
    }
    case EGG_REPL_GPIO_USAGE_ACTION:
      stack_clear(&repl_stack);
      repl_gpio_usage();
      break;
    case EGG_REPL_GPIO_ACTION: {
      uint8_t gpio = 0;
      stack_top(&repl_stack, &gpio);
      stack_pop(&repl_stack);
      repl_gpio(gpio);
      break;
    }
    }
  }
#+end_src
** 词法解析状态机
词法解析状态机见 egg-repl-lex-fsm.xlsx。
#+begin_src c :noweb-ref egg-repl-lex-fsm-action
  void egg_repl_lex_do_action(enum EGG_REPL_LEX_ACTION action, void * data) {
    struct egg_repl_lex_context_t * ctx = (struct egg_repl_lex_context_t *) data;
    switch (action) {
    case EGG_REPL_LEX_CR_ACTION:
      repl_state = egg_repl_transform_state(repl_state, EGG_REPL_CR_EVENT, NULL);
      break;
    case EGG_REPL_LEX_APPEND_ACTION:
      ctx->buf[ctx->ptr ++] = ctx->byte;
      break;
    case EGG_REPL_LEX_BACKSPACE_ACTION:
      if (ctx->ptr != 0) {
        ctx->ptr --;
      }
      break;
    case EGG_REPL_LEX_TOKEN_ACTION:
    case EGG_REPL_LEX_TOKEN_AND_CR_ACTION:
      if (ctx->ptr == 4 &&
          (ctx->buf[0] == 'H' || ctx->buf[0] == 'h') &&
          (ctx->buf[1] == 'E' || ctx->buf[1] == 'e') &&
          (ctx->buf[2] == 'L' || ctx->buf[2] == 'l') &&
          (ctx->buf[3] == 'P' || ctx->buf[3] == 'p')) {
        repl_state = egg_repl_transform_state(repl_state, EGG_REPL_HELP_EVENT, NULL);
      } else if (ctx->ptr == 4 &&
          (ctx->buf[0] == 'L' || ctx->buf[0] == 'l') &&
          (ctx->buf[1] == 'O' || ctx->buf[1] == 'o') &&
          (ctx->buf[2] == 'C' || ctx->buf[2] == 'c') &&
          (ctx->buf[3] == 'K' || ctx->buf[3] == 'k')) {
        repl_state = egg_repl_transform_state(repl_state, EGG_REPL_LOCK_EVENT, NULL);
      } else if (ctx->ptr == 5 &&
          (ctx->buf[0] == 'D' || ctx->buf[0] == 'd') &&
          (ctx->buf[1] == 'E' || ctx->buf[1] == 'e') &&
          (ctx->buf[2] == 'B' || ctx->buf[2] == 'b') &&
          (ctx->buf[3] == 'U' || ctx->buf[3] == 'u') &&
          (ctx->buf[4] == 'G' || ctx->buf[4] == 'g')) {
        repl_state = egg_repl_transform_state(repl_state, EGG_REPL_DEBUG_EVENT, NULL);
      } else if (ctx->ptr == 2 &&
          (ctx->buf[0] == 'O' || ctx->buf[0] == 'o') &&
          (ctx->buf[1] == 'N' || ctx->buf[1] == 'n')) {
        repl_state = egg_repl_transform_state(repl_state, EGG_REPL_ON_EVENT, NULL);
      } else if (ctx->ptr == 3 &&
          (ctx->buf[0] == 'O' || ctx->buf[0] == 'o') &&
          (ctx->buf[1] == 'F' || ctx->buf[1] == 'f') &&
          (ctx->buf[2] == 'F' || ctx->buf[2] == 'f')) {
        repl_state = egg_repl_transform_state(repl_state, EGG_REPL_OFF_EVENT, NULL);
      } else if (ctx->ptr == 4 &&
          (ctx->buf[0] == 'P' || ctx->buf[0] == 'p') &&
          (ctx->buf[1] == 'L' || ctx->buf[1] == 'l') &&
          (ctx->buf[2] == 'A' || ctx->buf[2] == 'a') &&
          (ctx->buf[3] == 'Y' || ctx->buf[3] == 'y')) {
        repl_state = egg_repl_transform_state(repl_state, EGG_REPL_PLAY_EVENT, NULL);
      } else if (ctx->ptr == 6 &&
          (ctx->buf[0] == 'V' || ctx->buf[0] == 'v') &&
          (ctx->buf[1] == 'O' || ctx->buf[1] == 'o') &&
          (ctx->buf[2] == 'L' || ctx->buf[2] == 'l') &&
          (ctx->buf[3] == 'U' || ctx->buf[3] == 'u') &&
          (ctx->buf[4] == 'M' || ctx->buf[4] == 'm') &&
          (ctx->buf[5] == 'E' || ctx->buf[5] == 'e')) {
        repl_state = egg_repl_transform_state(repl_state, EGG_REPL_VOLUME_EVENT, NULL);
      } else if (ctx->ptr == 4 &&
          (ctx->buf[0] == 'G' || ctx->buf[0] == 'g') &&
          (ctx->buf[1] == 'P' || ctx->buf[1] == 'p') &&
          (ctx->buf[2] == 'I' || ctx->buf[2] == 'i') &&
          (ctx->buf[3] == 'O' || ctx->buf[3] == 'o')) {
        repl_state = egg_repl_transform_state(repl_state, EGG_REPL_GPIO_EVENT, NULL);
      } else {
        repl_state = egg_repl_transform_state(repl_state, EGG_REPL_OTHERS_EVENT, NULL);
      }
      ctx->ptr = 0;
      if (action == EGG_REPL_LEX_TOKEN_AND_CR_ACTION) {
        repl_state = egg_repl_transform_state(repl_state, EGG_REPL_CR_EVENT, NULL);
      }
      break;
    case EGG_REPL_LEX_NUMBER_ACTION:
    case EGG_REPL_LEX_NUMBER_AND_CR_ACTION:
    case EGG_REPL_LEX_NUMBER_AND_APPEND_ACTION: {
      uint32_t num = string_to_uint((char *)ctx->buf, ctx->ptr);
      ctx->ptr = 0;
      repl_state = egg_repl_transform_state(repl_state, EGG_REPL_NUMBER_EVENT, &num);
      if (action == EGG_REPL_LEX_NUMBER_AND_CR_ACTION) {
        repl_state = egg_repl_transform_state(repl_state, EGG_REPL_CR_EVENT, NULL);
      } else if (action == EGG_REPL_LEX_NUMBER_AND_APPEND_ACTION) {
        ctx->buf[ctx->ptr ++] = ctx->byte;
      }
      break;
    }
    }
  }
#+end_src
** 词法解析上下文
交互上下文里要存放词法解析命令过程中用到的临时数据。
| name | type   |                                              |
|------+--------+----------------------------------------------|
| buf  | [byte] | 解析过程中使用的缓冲区, 命令行长度不超过 128 |
| ptr  | uint16 | 记录可用缓冲区的位置                         |
| byte | byte   | 解析的当前数据                               |

#+begin_src c :noweb-ref repl-lex-context
  struct egg_repl_lex_context_t {
    uint8_t buf[128];
    uint16_t ptr;
    uint8_t byte;
  };
#+end_src
** 交互命令
*** 帮助信息
**** help
#+begin_src c :noweb-ref repl-help
  static void repl_help(void) {
    repl_lock_usage();
    //repl_debug_usage();
    repl_play_usage();
    repl_volume_usage();
    repl_gpio_usage();
  }
#+end_src
**** lock usage
#+begin_src c :noweb-ref repl-lock-usage
  static void repl_lock_usage(void) {
    output_string("LOCK USAGE:\r\n");
    output_string("  LOCK ON cabin       关锁\r\n");
    output_string("    cabin             (1~16)\r\n");
    output_string("  LOCK OFF cabin      关锁\r\n");
    output_string("    cabin             (1~16)\r\n");
  }
#+end_src
**** debug usage
#+begin_src c :noweb-ref repl-debug-usage
  static void repl_debug_usage(void) {
    output_string("DEBUG USAGE:\r\n");
    output_string("  DEBUG ON            打开调试\r\n");
    output_string("  DEBUG OFF           关闭调试\r\n");
  }
#+end_src
**** play usage
#+begin_src c :noweb-ref repl-play-usage
  static void repl_play_usage(void) {
    output_string("PLAY USAGE:\r\n");
    output_string("  PLAY audio          播放音频\r\n");
    output_string("    audio             (1~65535)\r\n");
  }
#+end_src
**** volume usage
#+begin_src c :noweb-ref repl-volume-usage
  static void repl_volume_usage(void) {
    output_string("VOLUME USAGE:\r\n");
    output_string("  VOLUME vol          调节音量\r\n");
    output_string("    vol               (0~31)\r\n");
  }
#+end_src
**** gpio usage
#+begin_src c :noweb-ref repl-gpio-usage
  static void repl_gpio_usage(void) {
    output_string("GPIO USAGE:\r\n");
    output_string("  GPIO gpio           设置GPIO\r\n");
    output_string("    gpio              (0~15)\r\n");
  }
#+end_src
*** 开锁
REPL 上的 cabin 是从 1 开始计数的，需要调整为从 0 开始计数的。
#+begin_src c :noweb-ref repl-lock-off
  static void repl_lock_off(uint8_t cabin) {
    if (0 < cabin && cabin < 17) {
      lock_off(cabin - 1);
    } else {
      repl_lock_usage();
    }
  }
#+end_src
*** 关锁
REPL 上的 cabin 是从 1 开始计数的，需要调整为从 0 开始计数的。
#+begin_src c :noweb-ref repl-lock-on
  static void repl_lock_on(uint8_t cabin) {
    if (0 < cabin && cabin < 17) {
      lock_on(cabin - 1);
    } else {
      repl_lock_usage();
    }
  }
#+end_src
*** 调试开关
**** debug on
#+begin_src c :noweb-ref repl-debug-on
  static void repl_debug_on(void) {
    debug = 1;
  }
#+end_src
**** debug off
#+begin_src c :noweb-ref repl-debug-off
  static void repl_debug_off(void) {
    debug = 0;
  }
#+end_src
*** 音频
**** 播放
#+begin_src c :noweb-ref repl-play
  static void repl_play(uint16_t audio) {
    speaker_play(audio);
  }
#+end_src
**** 设置音量
#+begin_src c :noweb-ref repl-volume
  static void repl_volume(uint8_t volume) {
    if (volume > 31) {
      volume = 31;
    }
    speaker_volume(volume);
  }
#+end_src
*** GPIO
#+begin_src c :noweb-ref repl-gpio
  static void repl_gpio(uint8_t gpio) {
    gpio_exclamation_mark(gpio);
  }
#+end_src
