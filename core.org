#+STARTUP: indent

* 核心代码
** 基本框架
#+begin_src c :noweb yes :mkdirp yes :tangle /dev/shm/eggos/eggos.c
  #include <libopencm3/stm32/iwdg.h>
  #include <libopencm3/stm32/rcc.h>
  #include <libopencm3/cm3/nvic.h>
  #include <libopencm3/cm3/systick.h>
  #include <stddef.h>
  #include <stdint.h>
  #include "defination.h"
  #include "egg-fsm.h"
  #include "repl.h"
  #include "epigyny.h"
  #include "uart.h"
  #include "lock.h"
  #include "infrared.h"
  #include "speaker.h"
  #include "gpio.h"
  #include "led.h"
  #include "stack.h"

  #define EGG_STACK_BUFFER_BITSIZE  4

  volatile uint32_t systick = 0;
  uint16_t locking_off_cabins = 0;
  uint32_t slot = 0;
  uint32_t egg_states[16] = {EGG_LOCKING_ON_STATE, EGG_LOCKING_ON_STATE, EGG_LOCKING_ON_STATE, EGG_LOCKING_ON_STATE, EGG_LOCKING_ON_STATE, EGG_LOCKING_ON_STATE, EGG_LOCKING_ON_STATE, EGG_LOCKING_ON_STATE, EGG_LOCKING_ON_STATE, EGG_LOCKING_ON_STATE, EGG_LOCKING_ON_STATE, EGG_LOCKING_ON_STATE, EGG_LOCKING_ON_STATE, EGG_LOCKING_ON_STATE, EGG_LOCKING_ON_STATE, EGG_LOCKING_ON_STATE};
  uint32_t locking_timers[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  uint32_t delaying_timers[16] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  struct stack_t egg_stack;
  static uint8_t egg_stack_buffer[2 << (EGG_STACK_BUFFER_BITSIZE - 1)];

  <<sys-tick-handler>>

  static void setup(void) {
    stack_init(&egg_stack, egg_stack_buffer, EGG_STACK_BUFFER_BITSIZE);
    <<setup-systick>>
    <<setup-epigyny>>
    <<setup-repl>>
    uart_setup();
    <<setup-lock>>
    <<setup-infrared>>
    <<setup-speaker>>
    <<setup-gpio>>
    <<setup-led>>
    iwdg_set_period_ms(2000);
    iwdg_start();
  }

  <<egg-fsm-action>>

  int main(void) {
    setup();
    uint32_t loop_timer = systick;

    while (1) {
      // main loop
      iwdg_reset();
      infrared_eventloop();
      uart_eventloop();
      speaker_eventloop();
      <<main-loop>>
    }
    return 0;
  }
#+end_src
** 配置
*** 时钟
systick 设置为每 1 毫秒自增一次。
#+begin_src c :noweb-ref setup-systick
  rcc_clock_setup_in_hsi_out_48mhz();

  /* 48MHz => 48000000 counts per second */
  systick_set_clocksource(STK_CSR_CLKSOURCE_AHB);

  /* 48,000,000/48,000 = 1000 overflows per second - every 1ms one interrupt */
  /* SysTick interrupt every N clock pulses: set reload to N-1 */
  systick_set_reload(47999);
  systick_interrupt_enable();
  systick_counter_enable();
#+end_src

#+begin_src c :noweb-ref sys-tick-handler
  void sys_tick_handler(void) {
    systick ++;
  }
#+end_src
*** REPL通讯串口
REPL通讯挂在串口1上。

#+begin_src c :noweb-ref setup-repl
  repl_uart_context.setup = repl_setup;
  repl_uart_context.eventloop = repl_eventloop;

  uart_init(1, &repl_uart_context);
#+end_src

*** 上位机通讯串口
上位机通讯挂在串口2上。

#+begin_src c :noweb-ref setup-epigyny
  epigyny_uart_context.setup = epigyny_setup;
  epigyny_uart_context.eventloop = epigyny_eventloop;

  uart_init(2, &epigyny_uart_context);
#+end_src

*** 锁控
#+begin_src c :noweb-ref setup-lock
  lock_setup();
#+end_src
*** 红外检测
#+begin_src c :noweb-ref setup-infrared
  infrared_setup();
#+end_src
*** 音频
#+begin_src c :noweb-ref setup-speaker
  speaker_setup();
#+end_src
*** GPIO
#+begin_src c :noweb-ref setup-gpio
  gpio_setup();
#+end_src
*** LED
#+begin_src c :noweb-ref setup-led
  led_setup();
#+end_src
** 主循环
在初始化完成后，系统进入主循环，根据当前的状态和发生的事件，推动状态机
运行。
#+begin_src c :noweb-ref main-loop
  if (UINT32_DIFF_GREATER_THAN(systick, loop_timer, 299)) {
    loop_timer = systick;
    for (uint8_t i = 0; i < 16; i ++) {
      if (egg_states[i] == EGG_DELAYING_STATE) {
        if (UINT32_DIFF_GREATER_THAN(systick, delaying_timers[i], 199)) {
          egg_states[i] = egg_transform_state(egg_states[i], EGG_DELAY_TIMEOUT_EVENT, &i);
        }
      } else if (egg_states[i] == EGG_LOCKING_OFF_30S_STATE) {
        if (UINT32_DIFF_GREATER_THAN(systick, locking_timers[i], 29999)) {
          egg_states[i] = egg_transform_state(egg_states[i], EGG_30_SECONDS_TIMEOUT_EVENT, &i);
        }
      } else if (egg_states[i] == EGG_LOCKING_OFF_1M_STATE) {
        if (UINT32_DIFF_GREATER_THAN(systick, locking_timers[i], 59999)) {
          egg_states[i] = egg_transform_state(egg_states[i], EGG_1_MINUTE_TIMEOUT_EVENT, &i);
        }
      } else if (egg_states[i] == EGG_LOCKING_OFF_2M_STATE) {
        if (UINT32_DIFF_GREATER_THAN(systick, locking_timers[i], 119999)) {
          egg_states[i] = egg_transform_state(egg_states[i], EGG_2_MINUTES_TIMEOUT_EVENT, &i);
        }
      } else if (egg_states[i] == EGG_LOCKING_OFF_3M_STATE) {
        if (UINT32_DIFF_GREATER_THAN(systick, locking_timers[i], 179999)) {
          egg_states[i] = egg_transform_state(egg_states[i], EGG_3_MINUTES_TIMEOUT_EVENT, &i);
        }
      }
    }

    if (((loop_timer / 1000) & 1) == 0) {
      led_off();
    } else {
      led_on();
    }

    /*
    if (locking_off_cabins == 0) {
      led_off();
    } else {
      led_on();
    }
    ,*/
  }
#+end_src

** 核心状态机
核心流程：

1. 接收到开锁指令，开锁。

2. 延迟 200 MS 开始检查落蛋事件，这样是为了绕开因开锁的干扰导致检测到
   的落蛋事件。

3. 若 30 分钟内未检测到落蛋事件，播放提示语音。

4. 若 1 分钟内未检测到落蛋事件，播放提示语音。

5. 若 2 分钟内未检测到落蛋事件，播放提示语音。

6. 若 3 分钟内未检测到落蛋事件，播放提示语音，关锁并上报超时事件。

7. 在开锁后（含延迟 200 MS）三分钟内的任意时刻，检测到落蛋事件，播放提
   示语音，关锁并上报落蛋事件。

核心状态机的定义见 egg-fsm.xlsx 文件。
#+begin_src c :noweb-ref egg-fsm-action
  void egg_do_action(enum EGG_ACTION action, void * data) {
    uint8_t cabin = * (uint8_t *) data;
    switch (action) {
    case EGG_PLAY_WELCOME_NEWLINE_LOCK_OFF_ACTION:
      lock_off(cabin);
      speaker_play(1);
      locking_timers[cabin] = systick;
      delaying_timers[cabin] = systick;
      break;
    case EGG_LOCK_ON_ACTION:
      lock_on(cabin);
      break;
    case EGG_PLAY_GOODBYE_NEWLINE_LOCK_ON_NEWLINE_FALLEN_ACTION:
      lock_on(cabin);
      epigyny_fallen(cabin);
      speaker_play(2);
      break;
    case EGG_PLAY_30S_ACTION:
      speaker_play(3);
      break;
    case EGG_PLAY_3M_NEWLINE_LOCK_ON_NEWLINE_TIMEOUT_ACTION:
      lock_on(cabin);
      epigyny_timeout(cabin);
      speaker_play(6);
      break;
    case EGG_PLAY_1M_ACTION:
      speaker_play(4);
      break;
    case EGG_PLAY_2M_ACTION:
      speaker_play(5);
      break;
    }
  }
#+end_src
