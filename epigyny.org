#+STARTUP: indent
* 上位机处理
上位机处理部分执行并响应上位机下发的指令。
** 基本框架
#+begin_src c :noweb yes :mkdirp yes :tangle /dev/shm/eggos/epigyny.h
  #ifndef __EPIGYNY_H
  #define __EPIGYNY_H
  #include "uart.h"

  extern struct uart_context_t epigyny_uart_context;

  void epigyny_setup(struct uart_context_t * ctx);
  void epigyny_eventloop(struct uart_context_t * ctx);
  <<fallen-prototype>>
  <<upload-timeout-prototype>>
  #endif
#+end_src
#+begin_src c :noweb yes :mkdirp yes :tangle /dev/shm/eggos/epigyny.c
  #include <libopencm3/stm32/gpio.h>
  #include <libopencm3/stm32/rcc.h>
  #include <libopencm3/stm32/usart.h>
  #include <libopencm3/cm3/nvic.h>
  #include <stddef.h>
  #include "defination.h"
  #include "epigyny.h"
  #include "egg_packet.h"
  #include "uart.h"
  #include "ring.h"
  #include "utility.h"
  #include "egg-fsm.h"
  #include "egg-proto-fsm.h"
  #include "speaker.h"
  #include "gpio.h"

  #define EPIGYNY_BUFFER_BITSIZE 8

  static struct ring_t epigyny_tx;
  static struct ring_t epigyny_rx;
  static uint8_t epigyny_tx_buffer[2 << (EPIGYNY_BUFFER_BITSIZE - 1)];
  static uint8_t epigyny_rx_buffer[2 << (EPIGYNY_BUFFER_BITSIZE - 1)];
  struct uart_context_t epigyny_uart_context;
  static uint32_t egg_proto_state;

  <<proto-context>>

  static struct egg_proto_context_t context;
  <<epigyny-setup>>
  <<epigyny-eventloop>>
  <<proto-callback>>
  <<egg-proto-fsm-action>>
  <<fallen>>
  <<upload-timeout>>
#+end_src
** 配置
#+begin_src c :noweb-ref epigyny-setup
  void epigyny_setup(struct uart_context_t * ctx) {
    ring_init(&epigyny_tx, epigyny_tx_buffer, EPIGYNY_BUFFER_BITSIZE);
    ring_init(&epigyny_rx, epigyny_rx_buffer, EPIGYNY_BUFFER_BITSIZE);
    ctx->tx = &epigyny_tx;
    ctx->rx = &epigyny_rx;
    ctx->baudrate = 9600;
    ctx->databits = 8;
    ctx->stopbits = 1;
    ctx->tx_interval = 99; // 100ms
    ctx->loop_interval = 999; // 1s
    ctx->slot_enabled = 1;
    ctx->manual = 1;
    ctx->flow_rcc = RCC_GPIOF;
    ctx->flow_port = GPIOF;
    ctx->flow_io = GPIO4;
    bzero(&context, sizeof(struct egg_proto_context_t));
    egg_proto_state = EGG_PROTO_READY_STATE;
  }
#+end_src
** 主循环
在主循环中，程序要检查 RX 中收到的数据。所有收到的数据要送到协议状态机
中进行处理。当协议状态机发现接收的是完成数据包时，调用回调函数对上位机
的命令进行处理。
#+begin_src c :noweb-ref epigyny-eventloop
  void epigyny_eventloop(struct uart_context_t * uartctx) {
    struct ring_t * rx = uartctx->rx;
    uint32_t rxlen = ring_length(rx);
    struct egg_proto_context_t * ctx = &context;
    if (rxlen > 0) {
      ctx->rx_timer = systick;
      for (uint32_t i = 0; i < rxlen; i ++) {
        if (ctx->countdown <= 0xFFFF) {
          ctx->countdown --;
        }
        uint8_t byte;
        ring_read(rx, &byte);
        ctx->byte = byte;
        if (byte == 0x00) {
          egg_proto_state = egg_proto_transform_state(egg_proto_state, EGG_PROTO_0X00_EVENT, ctx);
        } else if (0x01 <= byte && byte <= 0x32) {
          egg_proto_state = egg_proto_transform_state(egg_proto_state, EGG_PROTO_0X01_MINUS_0X32_EVENT, ctx);
        } else if (byte == 0x33) {
          egg_proto_state = egg_proto_transform_state(egg_proto_state, EGG_PROTO_0X33_EVENT, ctx);
        } else if (0x34 <= byte && byte <= 0x3B) {
          egg_proto_state = egg_proto_transform_state(egg_proto_state, EGG_PROTO_0X34_MINUS_0X3B_EVENT, ctx);
        } else if (byte == 0x3C) {
          egg_proto_state = egg_proto_transform_state(egg_proto_state, EGG_PROTO_0X3C_EVENT, ctx);
        } else if (0x3D <= byte && byte <= 0xC2) {
          egg_proto_state = egg_proto_transform_state(egg_proto_state, EGG_PROTO_0X3D_MINUS_0XC2_EVENT, ctx);
        } else if (byte == 0xC3) {
          egg_proto_state = egg_proto_transform_state(egg_proto_state, EGG_PROTO_0XC3_EVENT, ctx);
        } else if (0xC4 <= byte && byte <= 0xCB) {
          egg_proto_state = egg_proto_transform_state(egg_proto_state, EGG_PROTO_0XC4_MINUS_0XCB_EVENT, ctx);
        } else if (byte == 0xCC) {
          egg_proto_state = egg_proto_transform_state(egg_proto_state, EGG_PROTO_0XCC_EVENT, ctx);
        } else if (0xCD <= byte) {
          egg_proto_state = egg_proto_transform_state(egg_proto_state, EGG_PROTO_0XCD_MINUS_0XFF_EVENT, ctx);
        }
        if (ctx->countdown == 0) {
          egg_proto_state = egg_proto_transform_state(egg_proto_state, EGG_PROTO_COUNTDOWN_EQUALS_0_EVENT, ctx);
        }
      }
    }

    if (ctx->rx_timer != 0xFFFFFFFF && (UINT32_DIFF_GREATER_THAN(systick, ctx->rx_timer, 99))) { // 1s
      egg_proto_state = egg_proto_transform_state(egg_proto_state, EGG_PROTO_EOF_EVENT, ctx);
      ctx->rx_timer = 0xFFFFFFFF;
    }
  }
#+end_src
** 协议状态机
协议状态机用于解析从上位机发送来的数据。协议状态机的定义见
egg-proto-fsm.xlsx 文件。

#+begin_src c :noweb-ref egg-proto-fsm-action
  void egg_proto_do_action(enum EGG_PROTO_ACTION action, void * data) {
    struct egg_proto_context_t * ctx = (struct egg_proto_context_t *) data;
    switch (action) {
    case EGG_PROTO_APPEND_ACTION:
      ctx->buf[ctx->ptr ++] = ctx->byte;
      break;
    case EGG_PROTO_CLEAR_ACTION:
      bzero(ctx, sizeof(struct egg_proto_context_t));
      ctx->countdown = (uint32_t) 0xFFFFFFFF;
      break;
    case EGG_PROTO_APPEND_AND_SAVE_TYPE_ACTION:
      ctx->buf[ctx->ptr ++] = ctx->byte;
      ctx->type = ctx->byte;
      break;
    case EGG_PROTO_APPEND_AND_SAVE_LEN0_ACTION:
      ctx->buf[ctx->ptr ++] = ctx->byte;
      ctx->len0 = ctx->byte;
      break;
    case EGG_PROTO_APPEND_AND_SAVE_LEN1_ACTION:
      ctx->buf[ctx->ptr ++] = ctx->byte;
      ctx->len1 = ctx->byte;
      ctx->countdown = ((ctx->len1 << 8) | ctx->len0) & 0xFFFF;
      break;
    case EGG_PROTO_CALLBACK_ACTION:
      epigyny_callback(ctx->buf, ctx->ptr);
      bzero(ctx, sizeof(struct egg_proto_context_t));
      ctx->countdown = (uint32_t) 0xFFFFFFFF;
      break;
    }
  }
#+end_src

** 协议解析上下文
解析上下文里要存放在解析过程中用到的临时数据。
| name      | type   |                                                                                 |
|-----------+--------+---------------------------------------------------------------------------------|
| buf       | [byte] | 解析过程中使用的缓冲区                                                          |
| ptr       | uint32 | 记录可用缓冲区的位置                                                            |
| byte      | byte   | 解析的当前数据                                                                  |
| len0      | byte   | 包中 base64 内容的数据长度的低 8 位                                             |
| len1      | byte   | 包中 base64 内容的数据长度的高 8 位                                             |
| countdown | uint32 | 剩余应读取的 base64 内容的长度。为 0 时产生 countdown = 0 事件。                |
| rx_timer  | uint32 | 最后一次接收到数据的时间戳。当前事件与 rx_timer 差异大于 1000 时，产生 EOF 事件 |

#+begin_src c :noweb-ref proto-context
  struct egg_proto_context_t {
    uint8_t buf[512];
    uint32_t ptr;
    uint8_t byte;
    uint8_t type;
    uint8_t len0;
    uint8_t len1;
    uint32_t countdown;
    uint32_t rx_timer;
  };
#+end_src
** 协议回调

协议上的 cabin 是从 1 开始计数的，在使用时，必须先变成从 0 开始计数的。
#+begin_src c :noweb-ref proto-callback
  static void epigyny_callback(uint8_t * buf, uint32_t size) {

    if (buf[8] == 0xFF) {
      slot = systick + 100 * EGGID;
      return;
    }

    if (buf[8] != EGG) {
      // it's not my device type, skip it
      return;
    }

    if (buf[9] != EGGID && buf[9] != 0xFF) {
      // it's not my packet, skip it
      return;
    }

    uint32_t len = egg_packet_estimate_decode_size(buf, size);
    uint8_t tmp[len];
    bzero(tmp, len);
    struct egg_packet_t * packet = (struct egg_packet_t *) &tmp;

    struct egg_packet_t ackpacket;
    bzero(&ackpacket, sizeof(struct egg_packet_t));
    ackpacket.egg = EGGID;
    ackpacket.payload.cmd = EGG_ACK;

    uint32_t cmd = egg_packet_decode(buf, size, len, packet);
    ackpacket.payload.sn = packet->payload.sn;

    switch (cmd) {
    case EGG_LOCK_OFF: {
      uint8_t cabin = packet->payload.cabin - 1;
      if (cabin < 16) {
        egg_states[cabin] = egg_transform_state(egg_states[cabin], EGG_LOCK_OFF_EVENT, &cabin);
        ackpacket.payload.ack_type = EGG_LOCK_OFF;
        ackpacket.payload.cabin = packet->payload.cabin;
      }
      break;
    }
    case EGG_LOCK_ON: {
      uint8_t cabin = packet->payload.cabin - 1;
      if (cabin < 16) {
        egg_states[cabin] = egg_transform_state(egg_states[cabin], EGG_LOCK_ON_EVENT, &cabin);
        ackpacket.payload.ack_type = EGG_LOCK_ON;
        ackpacket.payload.cabin = packet->payload.cabin;
      }
      break;
    }
    case EGG_PLAY:
      speaker_play(packet->payload.audio);
      ackpacket.payload.ack_type = EGG_PLAY;
      ackpacket.payload.audio = packet->payload.audio;
      break;
    case EGG_GPIO:
      gpio_exclamation_mark(packet->payload.gpio);
      ackpacket.payload.ack_type = EGG_GPIO;
      ackpacket.payload.gpio = packet->payload.gpio;
      break;
    case EGG_VOLUME:
      speaker_volume(packet->payload.volume);
      ackpacket.payload.ack_type = EGG_VOLUME;
      ackpacket.payload.volume = packet->payload.volume;
      break;
    case EGG_QUERY:{
      uint8_t cabin = packet->payload.cabin - 1;
      if (cabin < 16) {
        ackpacket.payload.ack_type = EGG_QUERY;
        ackpacket.payload.busy = (egg_states[cabin] != EGG_LOCKING_ON_STATE)? 1: 0;
        ackpacket.payload.cabin = packet->payload.cabin;
      }
      break;
    }
    default:
      break;
    }

    uint32_t acklen = egg_packet_calculate_encode_size(&ackpacket);
    uint8_t size_of_len = 0;
    if (acklen < 128) {
      size_of_len = 1;
    } else if (acklen < 16384) {
      size_of_len = 2;
    } else if (acklen < 2097152) {
      size_of_len = 3;
    } else {
      size_of_len = 4;
    }
    if (ring_available(&epigyny_tx) >= acklen + size_of_len) {
      uint8_t ackbuf[acklen + size_of_len];
      bzero(ackbuf, acklen + size_of_len);
      uint32_t reallen = egg_packet_encode(&ackpacket, ackbuf + size_of_len, acklen);
      acklen = reallen;
      uint8_t ptr = 0;
      while (acklen > 0) {
        ackbuf[ptr ++] = acklen & 0x7F;
        acklen = acklen >> 7;
      }
      ring_write_array(&epigyny_tx, ackbuf, 0, reallen + size_of_len);
    }

  }
#+end_src

** 落蛋上报
#+begin_src c :noweb-ref fallen-prototype
  void epigyny_fallen(uint8_t cabin);
#+end_src

#+begin_src c :noweb-ref fallen
  void epigyny_fallen(uint8_t cabin) {
    struct egg_packet_t packet;
    bzero(&packet, sizeof(struct egg_packet_t));
    packet.egg = EGGID;
    packet.payload.cmd = EGG_FALLEN;
    packet.payload.cabin = cabin + 1;
    uint32_t len = egg_packet_calculate_encode_size(&packet);
    uint8_t size_of_len = 0;
    if (len < 128) {
      size_of_len = 1;
    } else if (len < 16384) {
      size_of_len = 2;
    } else if (len < 2097152) {
      size_of_len = 3;
    } else {
      size_of_len = 4;
    }
    if (ring_available(&epigyny_tx) >= len + size_of_len) {
      uint8_t buf[len + size_of_len];
      bzero(buf, len + size_of_len);
      uint32_t reallen = egg_packet_encode(&packet, buf + size_of_len, len);
      len = reallen;
      uint8_t ptr = 0;
      while (len > 0) {
        buf[ptr ++] = len & 0x7F;
        len = len >> 7;
      }
      ring_write_array(&epigyny_tx, buf, 0, reallen + size_of_len);
    }
  }
#+end_src
** 超时上报
#+begin_src c :noweb-ref upload-timeout-prototype
  void epigyny_timeout(uint8_t cabin);
#+end_src

#+begin_src c :noweb-ref upload-timeout
  void epigyny_timeout(uint8_t cabin) {
    struct egg_packet_t packet;
    bzero(&packet, sizeof(struct egg_packet_t));
    packet.egg = EGGID;
    packet.payload.cmd = EGG_TIMEOUT;
    packet.payload.cabin = cabin + 1;
    uint32_t len = egg_packet_calculate_encode_size(&packet);
    uint8_t size_of_len = 0;
    if (len < 128) {
      size_of_len = 1;
    } else if (len < 16384) {
      size_of_len = 2;
    } else if (len < 2097152) {
      size_of_len = 3;
    } else {
      size_of_len = 4;
    }
    if (ring_available(&epigyny_tx) >= len + size_of_len) {
      uint8_t buf[len + size_of_len];
      bzero(buf, len + size_of_len);
      uint32_t reallen = egg_packet_encode(&packet, buf + size_of_len, len);
      len = reallen;
      uint8_t ptr = 0;
      while (len > 0) {
        buf[ptr ++] = len & 0x7F;
        len = len >> 7;
      }
      ring_write_array(&epigyny_tx, buf, 0, reallen + size_of_len);
    }
  }
#+end_src
