#+STARTUP: indent

* 驱动代码
** 串口
#+begin_src c :tangle /dev/shm/eggos/uart.h
  #ifndef __UART_H
  #define __UART_H
  #include <stdint.h>
  #include "ring.h"
  struct uart_context_t;
  typedef void (* uart_setup_fn)(struct uart_context_t * ctx);
  typedef void (* uart_eventloop_fn)(struct uart_context_t * ctx);
  struct uart_context_t {
    uint32_t baudrate;
    uint8_t databits, stopbits;
    struct ring_t * tx, * rx;
    uint32_t loop_timer;
    uint32_t loop_interval;
    uint32_t tx_timer;
    uint32_t tx_interval;
    uint32_t tx_to_send;
    uint8_t slot_enabled;
    uint8_t manual;
    uint32_t flow_port;
    uint32_t flow_io;
    uint32_t flow_rcc;
    //uint8_t uart;
    uart_setup_fn setup;
    uart_eventloop_fn eventloop;
  };

  void uart_init(uint8_t idx, struct uart_context_t * ctx);
  void uart_setup(void);
  void uart_start(void);
  void uart_eventloop(void);
  struct uart_context_t * uart_context(uint8_t idx);
  #endif
#+end_src

#+begin_src c :tangle /dev/shm/eggos/uart.c
  #include <libopencm3/stm32/gpio.h>
  #include <libopencm3/stm32/rcc.h>
  #include <libopencm3/stm32/usart.h>
  #include <libopencm3/cm3/nvic.h>
  #include <stddef.h>
  #include "defination.h"
  #include "uart.h"

  static int RCC_UART[2] = {
    RCC_USART1,
    RCC_USART2,
  };

  static int RCC_UART_GPIO[2] = {
    RCC_GPIOB,
    RCC_GPIOA,
  };

  static uint8_t NVIC_UART_IRQ[2] = {
    NVIC_USART1_IRQ,
    NVIC_USART2_IRQ,
  };

  static uint32_t TX_GPIO_PORT[2] = {
    GPIOB,
    GPIOA,
  };

  static uint32_t RX_GPIO_PORT[2] = {
    GPIOB,
    GPIOA,
  };

  static int TX_GPIO_IO[2] = {
    GPIO6,
    GPIO2,
  };

  static int RX_GPIO_IO[2] = {
    GPIO7,
    GPIO3,
  };

  static uint32_t UART[2] = {
    USART1,
    USART2,
  };

  static uint32_t GPIO_AF[2] = {
    GPIO_AF0,
    GPIO_AF1,
  };

  struct uart_context_t * ctxs[2] = { NULL, NULL };

  void uart_init(uint8_t idx, struct uart_context_t * ctx) {
    ctxs[idx - 1] = ctx;
  }

  void uart_setup() {
    for (uint8_t i = 0; i < 2; i ++) {
      if (ctxs[i] != NULL) {
        ctxs[i]->setup(ctxs[i]);

        rcc_periph_clock_enable(RCC_UART[i]);
        rcc_periph_clock_enable(RCC_UART_GPIO[i]);

        nvic_enable_irq(NVIC_UART_IRQ[i]);

        gpio_mode_setup(TX_GPIO_PORT[i], GPIO_MODE_AF, GPIO_PUPD_NONE, TX_GPIO_IO[i]);
        gpio_mode_setup(RX_GPIO_PORT[i], GPIO_MODE_AF, GPIO_PUPD_NONE, RX_GPIO_IO[i]);

        gpio_set_af(TX_GPIO_PORT[i], GPIO_AF[i], TX_GPIO_IO[i]);
        gpio_set_af(RX_GPIO_PORT[i], GPIO_AF[i], RX_GPIO_IO[i]);
        if (ctxs[i]->manual == 1) {
          rcc_periph_clock_enable(ctxs[i]->flow_rcc);
          gpio_mode_setup(ctxs[i]->flow_port, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, ctxs[i]->flow_io);
          gpio_clear(ctxs[i]->flow_port, ctxs[i]->flow_io);
        }

        /* Setup UART parameters. */
        usart_set_baudrate(UART[i], ctxs[i]->baudrate);
        usart_set_databits(UART[i], ctxs[i]->databits);
        usart_set_stopbits(UART[i], ctxs[i]->stopbits);
        usart_set_mode(UART[i], USART_MODE_TX_RX);
        usart_set_parity(UART[i], USART_PARITY_NONE);
        usart_set_flow_control(UART[i], USART_FLOWCONTROL_NONE);

        /* Enable receive interrupt. */
        USART_CR1(UART[i]) |= USART_CR1_RXNEIE;

        /* Finally enable the USART. */
        usart_enable(UART[i]);
      }
    }
  }
  #include "repl.h"

  void uart_eventloop() {
    for (uint8_t i = 0; i < 2; i ++) {
      struct uart_context_t * ctx = ctxs[i];
      if (ctx != NULL) {
        if (systick > ctx->loop_timer) {
          ctx->loop_timer = systick + ctx->loop_interval;
          ctx->eventloop(ctx);
        }
        if (systick > ctx->tx_timer) {
          ctx->tx_timer = systick + ctx->tx_interval;
          if (ctx->tx_to_send == 0) {
            if (ring_length(ctx->tx) > 1) {
              // saved length as varint type
              uint32_t len = 0;
              uint8_t byte = 0;
              uint8_t count = 0;
              ring_read(ctx->tx, &byte);
              while (byte > 127 && ring_length(ctx->tx) > 0) {
                ring_read(ctx->tx, &byte);
                len |= (byte & 0x7F) << (count * 7);
                count ++;
              }
              len |= (byte & 0x7F) << (count * 7);

              ctx->tx_to_send = len;
            }
          } else if (ctx->slot_enabled == 1) {
            if ((slot < systick) && (systick < slot + SLOT_LEN - (ctx->tx_to_send << 1))) {
              if (ctx->manual == 1) {
                gpio_set(ctx->flow_port, ctx->flow_io);
              }
              USART_CR1(UART[i]) |= USART_CR1_TXEIE;
            } else {
              USART_CR1(UART[i]) &= ~USART_CR1_TXEIE;
              if (ctx->manual == 1) {
                gpio_clear(ctx->flow_port, ctx->flow_io);
              }
            }
          } else {
            if (ctx->manual == 1) {
              gpio_set(ctx->flow_port, ctx->flow_io);
            }
            USART_CR1(UART[i]) |= USART_CR1_TXEIE;
          }
        }
      }
    }
  }

  struct uart_context_t * uart_context(uint8_t idx) {
    return ctxs[idx - 1];
  }

  static void uart_isr(uint8_t idx) {

    uint8_t data = 0;
    uint32_t result = 0;

    struct uart_context_t * ctx = ctxs[idx];
    if (ctx == NULL) return;

    /* Check if we were called because of RXNE. */
    if (((USART_CR1(UART[idx]) & USART_CR1_RXNEIE) != 0) && ((USART_ISR(UART[idx]) & USART_ISR_RXNE) != 0)) {

      /* Retrieve the data from the peripheral. */
      data = usart_recv(UART[idx]);
      ring_write(ctx->rx, data);
      if (ring_available(ctx->rx) == 0) {
        /* Disable the RXNEIE interrupt */
        USART_CR1(UART[idx]) &= ~USART_CR1_RXNEIE;
      }
    }

    /* Check if we were called because of TXE. */
    if (((USART_CR1(UART[idx]) & USART_CR1_TXEIE) != 0) && ((USART_ISR(UART[idx]) & USART_ISR_TXE) != 0)) {
      if (ctx->tx_to_send == 0) {
        USART_CR1(UART[idx]) &= ~USART_CR1_TXEIE;
        if (ctx->manual == 1) {
          /* Enable transmission complete interrupt. */
          USART_CR1(UART[idx]) |= USART_CR1_TCIE;
        }

        return;
      }

      result = ring_read(ctx->tx, &data);

      if (result == 0) {
        /* Disable the TXE interrupt, it's no longer needed. */
        USART_CR1(UART[idx]) &= ~USART_CR1_TXEIE;
      } else {
        /* Put data into the transmit register. */
        usart_send(UART[idx], data);
        ctx->tx_to_send --;
      }
    }

    /* Check if we were called because of TC. */
    if (((USART_CR1(UART[idx]) & USART_CR1_TCIE) != 0) && ((USART_ISR(UART[idx]) & USART_ISR_TC) != 0)) {
      if (ctx->tx_to_send == 0) {
        USART_CR1(UART[idx]) &= ~USART_CR1_TCIE;
        gpio_clear(ctx->flow_port, ctx->flow_io);
        return;
      }
    }
  }

  void usart1_isr(void) {
    uart_isr(1 - 1);
  }

  void usart2_isr(void) {
    uart_isr(2 - 1);
  }
#+end_src

注意，在使用发送窗口时，窗口关闭时间要考虑剩余发送字节长度。即，必须保
证在发送窗口内，能发送完毕所有字节。按 9600 的波特率来算，发送一个字节
大概需要 1.2 ms，在驱动中取整为 2 ms。因此 slot + SLOT_LEN 要减去
tx_to_send * 2。

** 锁控
#+begin_src c :tangle /dev/shm/eggos/lock.h
  #ifndef __LOCK_H
  #define __LOCK_H
  #include <stdint.h>

  void lock_setup(void);
  void lock_off(uint8_t cabin);
  void lock_on(uint8_t cabin);

  #endif
#+end_src
#+begin_src c :tangle /dev/shm/eggos/lock.c
  #include <libopencm3/stm32/rcc.h>
  #include <libopencm3/stm32/gpio.h>
  #include "lock.h"
  #include "defination.h"
  #include "repl.h"

  //static uint32_t ports[16] = {GPIOA, GPIOA, GPIOA, GPIOA, GPIOA, GPIOC, GPIOC, GPIOC, GPIOC, GPIOB, GPIOB, GPIOB, GPIOB, GPIOB, GPIOB, GPIOB};
  //static uint32_t ios[16] = {GPIO12, GPIO11, GPIO10, GPIO9, GPIO8, GPIO9, GPIO8, GPIO7, GPIO6, GPIO15, GPIO14, GPIO13, GPIO12, GPIO11, GPIO10, GPIO2};
  static uint32_t ports[16] = {GPIOB, GPIOB, GPIOB, GPIOB, GPIOB, GPIOB, GPIOB, GPIOC, GPIOC, GPIOC, GPIOC, GPIOA, GPIOA, GPIOA, GPIOA, GPIOA};
  static uint32_t ios[16] = {GPIO2, GPIO10, GPIO11, GPIO12, GPIO13, GPIO14, GPIO15, GPIO6, GPIO7, GPIO8, GPIO9, GPIO8, GPIO9, GPIO10, GPIO11, GPIO12};

  void lock_setup(void) {
    rcc_periph_clock_enable(RCC_GPIOA);
    rcc_periph_clock_enable(RCC_GPIOB);
    rcc_periph_clock_enable(RCC_GPIOC);
    for (uint8_t i = 0; i < 16; i ++) {
      gpio_mode_setup(ports[i], GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, ios[i]);
      gpio_set_output_options(ports[i], GPIO_OTYPE_PP, GPIO_OSPEED_HIGH, ios[i]);
      gpio_clear(ports[i], ios[i]);
    }
  }

  void lock_off(uint8_t cabin) {
    gpio_set(ports[cabin], ios[cabin]);
    locking_off_cabins |= 1 << cabin;
    if (debug == 1) {
      output_uint32(systick);
      output_string(" lock-off ");
      output_uint32(cabin + 1);
      output_newline();
    }
  }

  void lock_on(uint8_t cabin) {
    gpio_clear(ports[cabin], ios[cabin]);
    locking_off_cabins &= ~(1 << cabin);
    if (debug == 1) {
      output_uint32(systick);
      output_string(" lock-on ");
      output_uint32(cabin + 1);
      output_newline();
    }
  }
#+end_src
** 红外检测

红外检测的原理：

1. 外部中断在下降沿被触发，检测状态机切换的检测状态

2. 每 10 ms 采集一次红外 GPIO 上的结果，送入状态机进行记录

3. 对已经采集到的数据用3位卷积的方式进行低通过滤，结果存入 value 中
   （最高2位无效）

4. 在 value 中，在最低位是 111 （最近 30 ms 都是高电位） 时，往前查找
   000111 特征值（低电位转化到高电位，时间足够长）。找打特征值就表明红
   外触发，否则属于干扰。

#+begin_src c :tangle /dev/shm/eggos/infrared.h
  #ifndef __INFRARED_H
  #define __INFRARED_H
  void infrared_setup(void);
  void infrared_eventloop(void);
  void infrared_timeout(uint8_t cabin);
  #endif
#+end_src
#+begin_src c :tangle /dev/shm/eggos/infrared.c
  #include <stdint.h>
  #include <libopencm3/stm32/rcc.h>
  #include <libopencm3/stm32/gpio.h>
  #include <libopencm3/cm3/nvic.h>
  #include <libopencm3/stm32/exti.h>
  #include "defination.h"
  #include "infrared.h"
  #include "lock.h"
  #include "repl.h"
  #include "utility.h"
  #include "egg-fsm.h"
  #include "egg-infrared-fsm.h"

  struct infrared_context {
    uint32_t state;
    uint32_t sequence;
    uint32_t timer;
  };

  static uint16_t exti_triggered = 0;
  static uint32_t extis[16] = {EXTI0, EXTI1, EXTI2, EXTI3, EXTI4, EXTI5, EXTI6, EXTI7, EXTI8, EXTI9, EXTI10, EXTI11, EXTI12, EXTI13, EXTI14, EXTI15};
  static uint32_t ports[16] = {GPIOC, GPIOC, GPIOD, GPIOB, GPIOB, GPIOB, GPIOF, GPIOF, GPIOB, GPIOB, GPIOC, GPIOC, GPIOC, GPIOA, GPIOA, GPIOA};
  static uint32_t ios[16] = {GPIO0, GPIO1, GPIO2, GPIO3, GPIO4, GPIO5, GPIO6, GPIO7, GPIO8, GPIO9, GPIO10, GPIO11, GPIO12, GPIO13, GPIO14, GPIO15};
  //static uint8_t exti_to_idx[16] = {14, 15, 8, 9, 10, 11, 1, 2, 12, 13, 5, 6, 7, 0, 3, 4};
  static uint8_t exti_to_idx[16] = {1, 0, 7, 6, 5, 4, 14, 13, 3, 2, 10, 9, 8, 15, 12, 11};
  //static uint8_t idx_to_exti[16] = {13, 6, 7, 14, 15, 10, 11, 12, 2, 3, 4, 5, 8, 9, 0, 1};
  static uint8_t idx_to_exti[16] = {1, 0, 9, 8, 5, 4, 3, 2, 12, 11, 10, 15, 14, 7, 6, 13};
  static struct infrared_context ctxs[16];

  void infrared_setup(void) {
    rcc_periph_clock_enable(RCC_GPIOA);
    rcc_periph_clock_enable(RCC_GPIOB);
    rcc_periph_clock_enable(RCC_GPIOC);
    rcc_periph_clock_enable(RCC_GPIOD);
    rcc_periph_clock_enable(RCC_GPIOF);

    /* enable syscfg :], or else changing exti source from GPIOA is impossible */
    rcc_periph_clock_enable(RCC_SYSCFG_COMP);

    for (uint8_t i = 0; i < 16; i ++) {
      gpio_mode_setup(ports[i], GPIO_MODE_INPUT, GPIO_PUPD_PULLUP, ios[i]);
      exti_select_source(extis[i], ports[i]);
      exti_set_trigger(extis[i], EXTI_TRIGGER_FALLING);
      exti_reset_request(extis[i]);
      exti_enable_request(extis[i]);

      bzero(&ctxs[i], sizeof(struct infrared_context));
      ctxs[i].sequence = 0xFFFFFFFF;
      ctxs[i].state = EGG_INFRARED_READY_STATE;
    }

    nvic_enable_irq(NVIC_EXTI0_1_IRQ);
    nvic_enable_irq(NVIC_EXTI2_3_IRQ);
    nvic_enable_irq(NVIC_EXTI4_15_IRQ);

  }

  uint32_t timer = 0;

  void infrared_eventloop(void) {
    uint8_t idx = 0;
    while (exti_triggered != 0) {
      if ((exti_triggered & (1 << idx)) != 0) {
        ctxs[idx].state = egg_infrared_transform_state(ctxs[idx].state, EGG_INFRARED_EXTI_EVENT, &idx);
        exti_triggered &= ~(1 << idx);
      }
      idx ++;
    }
    for (uint8_t i = 0; i < 16; i ++) {
    continue_loop:
      if (ctxs[i].state == EGG_INFRARED_CHECKING_STATE) {
        if (systick > ctxs[i].timer) {
          if (gpio_get(ports[idx_to_exti[i]], ios[idx_to_exti[i]]) == 0) {
            ctxs[i].state = egg_infrared_transform_state(ctxs[i].state, EGG_INFRARED_0_EVENT, &i);
          } else {
            ctxs[i].state = egg_infrared_transform_state(ctxs[i].state, EGG_INFRARED_1_EVENT, &i);
          }
          // calculate convolution (low-pass filter)
          uint32_t value = 0;
          for (int j = 32 - 3; j >= 0; j --) {
            value <<= 1;
            switch ((ctxs[i].sequence >> j) & 0x07) {
            case 3:
            case 5:
            case 6:
            case 7:
              value |= 1;
              break;
            default:
              break;
            }
          }

          // check
          if ((value & 0x07) == 0x07) { // it must be 111 now
            for (uint8_t k = 3; k < 32 - 3 - 6; k ++) {
              uint8_t slice = (value >> k) & 0x3F;
              if (((slice & 0x07) == 0x07) && (((slice >> 3) & 0x07) == 0) && ((value & (0xFFFFFFFF >> (32 - k))) != 0)) {
                // found sequence: 000111 and right sequence is 1.1...
                ctxs[i].state = egg_infrared_transform_state(ctxs[i].state, EGG_INFRARED_DETECTED_EVENT, &i);
                goto continue_loop;
              }
            }
          }
        }
      }
    }
  }

  void infrared_timeout(uint8_t idx) {
    ctxs[idx].state = egg_infrared_transform_state(ctxs[idx].state, EGG_INFRARED_TIMEOUT_EVENT, &idx);
  }

  void egg_infrared_do_action(enum EGG_INFRARED_ACTION action, void * data) {
    uint8_t idx = * (uint8_t *) data;

    switch (action) {
    case EGG_INFRARED_INIT_ACTION:
      ctxs[idx].sequence = 0xFFFFFFFF;
      ctxs[idx].timer = systick + 10; // interval of 10 ms
      break;
    case EGG_INFRARED_SET_0_ACTION:
      ctxs[idx].sequence <<= 1;
      ctxs[idx].timer = systick + 10; // interval of 10 ms
      break;
    case EGG_INFRARED_SET_1_ACTION:
      ctxs[idx].sequence <<= 1;
      ctxs[idx].sequence |= 0x01;
      ctxs[idx].timer = systick + 10; // interval of 10 ms
      break;
    case EGG_INFRARED_TRIGGER_ACTION:
      egg_states[idx] = egg_transform_state(egg_states[idx], EGG_INFRARED_TRIGGERED_EVENT, &idx);
      if (debug == 1) {
        output_uint32(systick);
        output_string(" Infrared ");
        output_uint32(idx + 1);
        output_string(" triggered\r\n");
      }
      break;
    }
  }

  void exti0_1_isr(void) {
    if (exti_get_flag_status(EXTI0)) {
      exti_triggered |= (1 << exti_to_idx[0]);
      exti_reset_request(EXTI0);
    }
    if (exti_get_flag_status(EXTI1)) {
      exti_triggered |= (1 << exti_to_idx[1]);
      exti_reset_request(EXTI1);
    }
  }

  void exti2_3_isr(void) {
    if (exti_get_flag_status(EXTI2)) {
      exti_triggered |= (1 << exti_to_idx[2]);
      exti_reset_request(EXTI2);
    }
    if (exti_get_flag_status(EXTI3)) {
      exti_triggered |= (1 << exti_to_idx[3]);
      exti_reset_request(EXTI3);
    }
  }

  void exti4_15_isr(void) {
    for (uint8_t i = 4; i < 16; i ++) {
      if (exti_get_flag_status(extis[i])) {
        exti_triggered |= (1 << exti_to_idx[i]);
        exti_reset_request(extis[i]);
      }
    }
  }
#+end_src

注意：

1. EXTI 和 GPIO 是一一对应关系，EXTI0 只能由 PX0 触发。

2. 如果要 GPIOA 以外的 IO 口都能触发外部中断，必须使能 RCC_SYSCFG_COMP。

** 音频

#+begin_src c :tangle /dev/shm/eggos/speaker.h
  #ifndef _SPEAKER_H
  #define _SPEAKER_H
  #include <stdint.h>
  void speaker_setup(void);
  void speaker_eventloop(void);
  void speaker_play(uint16_t idx);
  void speaker_volume(uint8_t vol);
  #endif
#+end_src

#+begin_src c :tangle /dev/shm/eggos/speaker.c
  #include <libopencm3/stm32/rcc.h>
  #include <libopencm3/stm32/gpio.h>
  #include <libopencm3/stm32/timer.h>
  #include <libopencm3/cm3/nvic.h>
  #include "speaker.h"
  #include "defination.h"
  #include "utility.h"
  #include "ring.h"
  #include "repl.h"

  #define SPEAKER_TIM_RCC     RCC_TIM2
  #define SPEAKER_GPIO_RCC    RCC_GPIOA
  #define SPEAKER_TIM         TIM2
  #define SPEAKER_TIM_RST     RST_TIM2
  #define SPEAKER_PORT        GPIOA
  #define SPEAKER_IO          GPIO1
  #define SPEAKER_NVIC_IRQ    NVIC_TIM2_IRQ

  #define SPEAKER_BUFFER_BITSIZE 4

  struct ring_t speaker_tx;
  uint8_t speaker_tx_buffer[2 << (SPEAKER_BUFFER_BITSIZE - 1)];

  static volatile uint8_t count_to_send = 0; // count of bit to send
  static volatile uint16_t data = 0;

  static void speaker_write(uint8_t byte) {
    while (count_to_send != 0);
    data = ((((uint16_t)byte) << 1) | 0x0200);
    count_to_send = 10;
  }

  void speaker_setup(void) {

    ring_init(&speaker_tx, speaker_tx_buffer, SPEAKER_BUFFER_BITSIZE);

    rcc_periph_clock_enable(SPEAKER_TIM_RCC);
    rcc_periph_clock_enable(SPEAKER_GPIO_RCC);

    gpio_mode_setup(SPEAKER_PORT, GPIO_MODE_OUTPUT, GPIO_PUPD_PULLUP, SPEAKER_IO);
    gpio_set_output_options(SPEAKER_PORT, GPIO_OTYPE_PP, GPIO_OSPEED_HIGH, SPEAKER_IO);

    /* Reset TIM2 peripheral to defaults. */
    rcc_periph_reset_pulse(SPEAKER_TIM_RST);

    timer_set_mode(SPEAKER_TIM, TIM_CR1_CKD_CK_INT, TIM_CR1_CMS_EDGE, TIM_CR1_DIR_UP);

    timer_set_prescaler(SPEAKER_TIM, 499);

    timer_set_period(SPEAKER_TIM, 9);

    /* Enable TIM2 interrupt. */

    nvic_enable_irq(SPEAKER_NVIC_IRQ);
    timer_enable_update_event(SPEAKER_TIM); /* default at reset! */
    timer_enable_irq(SPEAKER_TIM, TIM_DIER_UIE);
    timer_enable_counter(SPEAKER_TIM);

    speaker_volume(15);
    speaker_volume(15);
  }

  void speaker_play(uint16_t idx) {
    uint8_t cmd[] = { 0x7E, 0x05, 0x41, 0x00, 0x00, 0x00, 0xEF };
    cmd[3] = (idx >> 8) & 0xFF;
    cmd[4] = (idx >> 0) & 0xFF;
    cmd[5] = cmd[1] ^ cmd[2] ^ cmd[3] ^ cmd[4];
    ring_write_array(&speaker_tx, cmd, 0, 7);
    if (debug == 1) {
      output_uint32(systick);
      output_string(" play ");
      output_uint32(idx);
      output_newline();
    }
  }

  void speaker_volume(uint8_t vol) {
    uint8_t cmd[] = { 0x7E, 0x04, 0x31, 0x00, 0x00, 0xEF };
    cmd[3] = vol;
    cmd[4] = cmd[1] ^ cmd[2] ^ cmd[3];
    ring_write_array(&speaker_tx, cmd, 0, 6);
    if (debug == 1) {
      output_uint32(systick);
      output_string(" volume ");
      output_uint32(vol);
      output_newline();
    }
  }

  void speaker_eventloop(void) {
    if (ring_length(&speaker_tx) > 0) {
      uint8_t byte = 0;
      if (ring_read(&speaker_tx, &byte) != 0) {
        speaker_write(byte);
      }
    }
  }

  void tim2_isr(void) {
    if (TIM_SR(SPEAKER_TIM) & TIM_SR_UIF) {
      if (count_to_send == 0) {
        TIM_SR(SPEAKER_TIM) &= ~TIM_SR_UIF;
        return;
      }
      if ((data & 0x01) == 0) {
        gpio_clear(SPEAKER_PORT, SPEAKER_IO);
      } else {
        gpio_set(SPEAKER_PORT, SPEAKER_IO);
      }
      data >>= 1;
      count_to_send --;
      TIM_SR(SPEAKER_TIM) &= ~TIM_SR_UIF;
    }
  }
#+end_src
** GPIO
控制灯光
#+begin_src c :tangle /dev/shm/eggos/gpio.h
  #ifndef __GPIO_H
  #define __GPIO_H
  #include <stdint.h>

  void gpio_setup(void);
  void gpio_exclamation_mark(uint8_t gpio);

  #endif
#+end_src
#+begin_src c :tangle /dev/shm/eggos/gpio.c
  #include <libopencm3/stm32/rcc.h>
  #include <libopencm3/stm32/gpio.h>
  #include "gpio.h"

  static uint32_t ports[4] = {GPIOC, GPIOC, GPIOB, GPIOB};
  static uint32_t ios[4] = {GPIO4, GPIO5, GPIO0, GPIO1};

  void gpio_setup() {
    rcc_periph_clock_enable(RCC_GPIOB);
    rcc_periph_clock_enable(RCC_GPIOC);
    for (uint8_t i = 0; i < 4; i ++) {
      gpio_mode_setup(ports[i], GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, ios[i]);
      gpio_set(ports[i], ios[i]);
    }
  }

  void gpio_exclamation_mark(uint8_t gpio) {
    for (uint8_t i = 0; i < 4; i ++) {
      if ((gpio & (1 << i)) != 0) {
        gpio_clear(ports[i], ios[i]);
      } else {
        gpio_set(ports[i], ios[i]);
      }
    }
  }
#+end_src
** LED
#+begin_src c :tangle /dev/shm/eggos/led.h
  #ifndef __LED_H
  #define __LED_H

  void led_setup(void);
  void led_on(void);
  void led_off(void);
  #endif
#+end_src
#+begin_src c :tangle /dev/shm/eggos/led.c
  #include <libopencm3/stm32/rcc.h>
  #include <libopencm3/stm32/gpio.h>
  #include "led.h"

  #define LED_RCC             RCC_GPIOF
  #define LED_PORT            GPIOF
  #define LED_IO              GPIO5

  void led_setup() {
    rcc_periph_clock_enable(LED_RCC);
    gpio_mode_setup(LED_PORT, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, LED_IO);
    led_off();
  }

  void led_on() {
    gpio_clear(LED_PORT, LED_IO);
  }

  void led_off() {
    gpio_set(LED_PORT, LED_IO);
  }
#+end_src
